{"version":3,"names":["RCTAsyncStorage","TurboModuleRegistry","get","NativeModules","shouldFallbackToLegacyNativeModule"],"sources":["RCTAsyncStorage.ts"],"sourcesContent":["// @ts-ignore Module '\"react-native\"' has no exported member 'TurboModuleRegistry'.\nimport { NativeModules, TurboModuleRegistry } from 'react-native';\nimport { shouldFallbackToLegacyNativeModule } from './shouldFallbackToLegacyNativeModule';\n\n// TurboModuleRegistry falls back to NativeModules so we don't have to try go\n// assign NativeModules' counterparts if TurboModuleRegistry would resolve\n// with undefined.\nlet RCTAsyncStorage = TurboModuleRegistry\n  ? TurboModuleRegistry.get('PlatformLocalStorage') || // Support for external modules, like react-native-windows\n    TurboModuleRegistry.get('RNC_AsyncSQLiteDBStorage') ||\n    TurboModuleRegistry.get('RNCAsyncStorage')\n  : NativeModules['PlatformLocalStorage'] || // Support for external modules, like react-native-windows\n    NativeModules['RNC_AsyncSQLiteDBStorage'] ||\n    NativeModules['RNCAsyncStorage'];\n\nif (!RCTAsyncStorage && shouldFallbackToLegacyNativeModule()) {\n  if (TurboModuleRegistry) {\n    RCTAsyncStorage =\n      TurboModuleRegistry.get('AsyncSQLiteDBStorage') ||\n      TurboModuleRegistry.get('AsyncLocalStorage');\n  } else {\n    RCTAsyncStorage =\n      NativeModules['AsyncSQLiteDBStorage'] ||\n      NativeModules['AsyncLocalStorage'];\n  }\n}\n\nexport default RCTAsyncStorage;\n"],"mappings":";;;;;;;AACA;;AACA;;AAFA;AAIA;AACA;AACA;AACA,IAAIA,eAAe,GAAGC,gCAAA,GAClBA,gCAAA,CAAoBC,GAApB,CAAwB,sBAAxB,KAAmD;AACnDD,gCAAA,CAAoBC,GAApB,CAAwB,0BAAxB,CADA,IAEAD,gCAAA,CAAoBC,GAApB,CAAwB,iBAAxB,CAHkB,GAIlBC,0BAAA,CAAc,sBAAd,KAAyC;AACzCA,0BAAA,CAAc,0BAAd,CADA,IAEAA,0BAAA,CAAc,iBAAd,CANJ;;AAQA,IAAI,CAACH,eAAD,IAAoB,IAAAI,sEAAA,GAAxB,EAA8D;EAC5D,IAAIH,gCAAJ,EAAyB;IACvBD,eAAe,GACbC,gCAAA,CAAoBC,GAApB,CAAwB,sBAAxB,KACAD,gCAAA,CAAoBC,GAApB,CAAwB,mBAAxB,CAFF;EAGD,CAJD,MAIO;IACLF,eAAe,GACbG,0BAAA,CAAc,sBAAd,KACAA,0BAAA,CAAc,mBAAd,CAFF;EAGD;AACF;;eAEcH,e"}