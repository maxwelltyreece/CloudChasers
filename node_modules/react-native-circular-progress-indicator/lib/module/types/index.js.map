{"version":3,"names":[],"sources":["index.ts"],"sourcesContent":["import type React from 'react';\nimport type { TextInputProps, TextStyle } from 'react-native';\nimport type { AnimateProps } from 'react-native-reanimated';\nimport type Animated from 'react-native-reanimated';\nimport type { CircleProps } from 'react-native-svg';\n\ntype StrokeLineCapType = 'butt' | 'round' | 'square';\n\ntype DashedStrokeConfigType = {\n  /**\n   * The total number of dashes to draw.\n   */\n  count: number;\n  /**\n   * The width of each dash.\n   */\n  width: number;\n};\n\ntype CircleGradientProps = {\n  /**\n   * active progress circle color. Use this to change the\n   * color of the progress ring.\n   *\n   * @default '#2ecc71'\n   */\n  activeStrokeColor?: string;\n  /**\n   * active progress secondary color. Use this to provide a\n   * gradient effect. The circle will be drawn with gradient\n   * activeStrokeColor and activeStrokeSecondaryColor.\n   *\n   * @default null\n   */\n  activeStrokeSecondaryColor?: string | null;\n};\n\ninterface DashedCircleProps {\n  circleCircumference: number;\n  inActiveStrokeWidth: number;\n  activeStrokeWidth: number;\n  inactiveCircleRadius: number;\n  activeCircleRadius: number;\n  dashedStrokeConfig?: DashedStrokeConfigType;\n}\n\ntype StrokeColorConfigType = {\n  value: number;\n  color: string;\n};\n\ninterface BaseProgressCircleProps extends CircleGradientProps {\n  /**\n   * progress circle background color. Use this to\n   * change the background color of the progress circle.\n   *\n   * @default 'transparent'\n   */\n  circleBackgroundColor?: string;\n  /**\n   * progress circle radius. This is useful if you want\n   * to adjust the size of the progress circle.\n   *\n   * @default 60\n   */\n  radius?: number;\n  /**\n   * progress stroke line cap.\n   */\n  strokeLinecap?: StrokeLineCapType;\n  /**\n   * inactive progress circle color. Use this to change\n   * the color of inactive circle.\n   *\n   * @default 'rgba(0,0,0,0.3)'\n   */\n  inActiveStrokeColor?: string;\n  /**\n   * inactive progress circle opacity value. This is useful if\n   * you want to change the opacity of the inactive circle.\n   *\n   * @default 1\n   */\n  inActiveStrokeOpacity?: number;\n  /**\n   * active progress circle stroke width. Use this to change the\n   * stroke width of the active progress circle.\n   *\n   * @default 10\n   */\n  activeStrokeWidth?: number;\n  /**\n   * inactive progress circle stroke width. Use this to change the\n   * stroke width of the inactive progress circle.\n   *\n   * @default 10\n   */\n  inActiveStrokeWidth?: number;\n  /**\n   * This is useful if you want to display the progress circle as dashed lines.\n   * The dashed stroke count and stroke width can be customized.\n   * Based on these values and the radius of the circle,\n   * the dash gap between each dashes will be calculated automatically.\n   */\n  dashedStrokeConfig?: DashedStrokeConfigType;\n  /**\n   * This is useful if you want to animate the progress circle stroke color\n   * based on the animation value. The stroke color config accepts an array\n   * of color & value object. You can define a specific color for a\n   * specific value and the component will animate the color based on the\n   * current animated value.\n   * It is important to note that when this is used, the strokeColorConfig\n   * will take precedence over the activeStrokeColor and the\n   * activeStrokeSecondaryColor props.\n   */\n  strokeColorConfig?: StrokeColorConfigType[];\n}\n\ninterface ProgressCircleProps extends BaseProgressCircleProps {\n  animatedCircleProps: AnimateProps<CircleProps>;\n}\n\ninterface BaseCircularProgressProps extends BaseProgressCircleProps {\n  /**\n   * progress percentage of the circle. Any change in\n   * this value will trigger the animation.\n   */\n  value: number;\n  /**\n   * initial progress value. This is useful if you want to\n   * use the progress circle as a countdown timer. This will\n   * set the initial value of the animation value and will gradually\n   * animate to the value of the value prop.\n   *\n   * @default 0\n   */\n  initialValue?: number;\n  /**\n   * progress animation duration. Use this to control the\n   * duration of the progress animation.\n   *\n   * @default 500\n   */\n  duration?: number;\n  /**\n   * progress animation delay. Use this to provide a delay\n   * to the progress animation. The animation will start after\n   * the delay. Accepts a number in milliseconds.\n   *\n   * @default 0\n   */\n  delay?: number;\n  /**\n   * progress maximum value. The percentage calculation is\n   * based on the maximum value provided.\n   *\n   * @default 100\n   */\n  maxValue?: number;\n  /**\n   * callback when animation is completed. This is useful if\n   * you want to trigger an action after the animation is completed.\n   */\n  onAnimationComplete?: () => void;\n  /**\n   * change direction of progress ring. By default the progress\n   * ring will be drawn clockwise. If you want to draw the progress\n   * ring counter clockwise, set this to false.\n   *\n   * @default true\n   */\n  clockwise?: boolean;\n  /**\n   * Use this to render the progress circle initially without any animation.\n   * This will by default pause the progress animation and the progress will\n   * be kept at zero.\n   * The component can be animated again by calling the `reAnimate` or `play`\n   * function.\n   *\n   * @default false\n   */\n  startInPausedState?: boolean;\n  /**\n   * rotate the progress ring by this value. Accepts a number from -360 to 360.\n   *\n   * @default 0\n   */\n  rotation?: number;\n}\n\ninterface CircularProgressBaseProps extends BaseCircularProgressProps {\n  /**\n   * custom child component for circular progress. This is\n   * useful if you want to add a custom component to be\n   * displayed inside the circular progress bar.\n   */\n  children?: React.ReactNode;\n}\n\ninterface CircularProgressProps extends BaseCircularProgressProps {\n  /**\n   * title to display below the progress value. This\n   * is useful if you want to display a title below the\n   * progress value.\n   *\n   * @default ''\n   */\n  title?: string;\n  /**\n   * title text style. Use this props to customize the\n   * title text style.\n   *\n   * @default {}\n   */\n  titleStyle?: TextStyle;\n  /**\n   * title text color. Use this to change the color of the\n   * title text. If not provided, the active stroke color or\n   * the color from title style will be used.\n   *\n   * @default null\n   */\n  titleColor?: string;\n  /**\n   * title text font size. Use this to change the font size\n   * of the title text. If not provided, the font size from title\n   * style  or a value calculated from the circle radius will be used.\n   */\n  titleFontSize?: number;\n  /**\n   * progress value text color. Use this to change the color of\n   * the progress value text. If not provided, the active stroke color\n   * or the color from progress value style style will be used.\n   */\n  progressValueColor?: string;\n  /**\n   * progress value text style. Use this props to customize the\n   * progress value text style.\n   *\n   * @default {}\n   */\n  progressValueStyle?: TextStyle;\n  /**\n   * progress value text font size. Use this to change the font size\n   * of the progress value text. If not provided, the font size from\n   * progress value style or a value calculated from the circle radius\n   * will be used.\n   */\n  progressValueFontSize?: number;\n  /**\n   * prefix value. This is useful if you want to display a prefix\n   * value before the progress value.\n   *\n   * @default ''\n   */\n  valuePrefix?: string;\n  /**\n   * suffix value. Use this to display a suffix value after the\n   * progress value.\n   *\n   * @default ''\n   */\n  valueSuffix?: string;\n  /**\n   * show or hide the progress text value. This is useful if you\n   * want to hide the progress value text.\n   *\n   * @default true\n   */\n  showProgressValue?: boolean;\n  /**\n   * subtitle text value. Use this to display a subtitle below\n   * the progress value.\n   *\n   * @default ''\n   */\n  subtitle?: string;\n  /**\n   * subtitle text style. Use this props to customize the\n   * subtitle text style.\n   *\n   * @default {}\n   */\n  subtitleStyle?: TextStyle;\n  /**\n   * subtitle text color. Use this to change the color of the\n   * subtitle text. If not provided, the active stroke color or\n   * the color from subtitle style or the active stroke color\n   * will be used.\n   */\n  subtitleColor?: string;\n  /**\n   * subtitle text font size. Use this to change the font size\n   * of the subtitle text. If not provided, the font size from\n   * subtitle style or a value calculated from the circle radius\n   * will be used.\n   */\n  subtitleFontSize?: number;\n  /**\n   * function to format the progress value.\n   * By default, the value is rounded to the nearest integer.\n   * Make sure to define it as a worklet function.\n   * https://docs.swmansion.com/react-native-reanimated/docs/2.2.0/worklets/\n   */\n  // eslint-disable-next-line no-unused-vars\n  progressFormatter?: (v: number) => number | string;\n  /**\n   * specifies whether fonts should scale to respect Text Size\n   * accessibility settings. Pass false to disable automatic text\n   * scaling.\n   */\n  allowFontScaling?: boolean;\n  /**\n   * custom styling to value prefix.\n   * Use this to customize the styling of the value prefix.\n   * If not provided, the progress value style/colors will be used.\n   *\n   * * @default {}\n   */\n  valuePrefixStyle?: TextStyle;\n  /**\n   * custom styling to value suffix.\n   * Use this to customize the styling of the value suffix.\n   * If not provided, the progress value style/colors will be used.\n   *\n   * * @default {}\n   */\n  valueSuffixStyle?: TextStyle;\n}\n\ntype ProgressValueProps = {\n  initialValue: number;\n  radius?: number;\n  activeStrokeColor?: string;\n  progressValueColor?: string;\n  progressValueStyle?: TextStyle;\n  progressValueFontSize?: number;\n  progressValue: Animated.SharedValue<string>;\n  animatedTextProps: AnimateProps<TextInputProps>;\n  allowFontScaling?: boolean;\n};\n\ntype ProgressRef = {\n  /**\n   * Use this to play the animation once  the animation is paused.\n   */\n  play: () => void;\n  /**\n   * Use this to pause the animation.\n   */\n  pause: () => void;\n  /**\n   * Use this to replay the animation.\n   */\n  reAnimate: () => void;\n};\n\nexport type {\n  CircleGradientProps,\n  ProgressCircleProps,\n  CircularProgressBaseProps,\n  CircularProgressProps,\n  DashedCircleProps,\n  DashedStrokeConfigType,\n  ProgressValueProps,\n  StrokeColorConfigType,\n  ProgressRef,\n};\n"],"mappings":""}