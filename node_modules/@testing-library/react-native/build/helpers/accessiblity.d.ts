import { AccessibilityState, AccessibilityValue } from 'react-native';
import { ReactTestInstance } from 'react-test-renderer';
type IsInaccessibleOptions = {
    cache?: WeakMap<ReactTestInstance, boolean>;
};
export declare const accessibilityStateKeys: (keyof AccessibilityState)[];
export declare const accessiblityValueKeys: (keyof AccessibilityValue)[];
export declare function isHiddenFromAccessibility(element: ReactTestInstance | null, { cache }?: IsInaccessibleOptions): boolean;
/** RTL-compatitibility alias for `isHiddenFromAccessibility` */
export declare const isInaccessible: typeof isHiddenFromAccessibility;
export declare function isAccessibilityElement(element: ReactTestInstance | null): boolean;
/**
 * Returns the accessibility role for given element. It will return explicit
 * role from either `role` or `accessibilityRole` props if set.
 *
 * If explicit role is not available, it would try to return default element
 * role:
 * - `text` for `Text` elements
 *
 * In all other cases this functions returns `none`.
 *
 * @param element
 * @returns
 */
export declare function getAccessibilityRole(element: ReactTestInstance): any;
export declare function getAccessibilityViewIsModal(element: ReactTestInstance): any;
export declare function getAccessibilityLabel(element: ReactTestInstance): string | undefined;
export declare function getAccessibilityLabelledBy(element: ReactTestInstance): string | undefined;
export declare function getAccessibilityState(element: ReactTestInstance): AccessibilityState | undefined;
export declare function getAccessibilityCheckedState(element: ReactTestInstance): AccessibilityState['checked'];
export declare function getAccessibilityValue(element: ReactTestInstance): AccessibilityValue | undefined;
export declare function isElementBusy(element: ReactTestInstance): NonNullable<AccessibilityState['busy']>;
export declare function isElementCollapsed(element: ReactTestInstance): NonNullable<AccessibilityState['expanded']>;
export declare function isElementExpanded(element: ReactTestInstance): NonNullable<AccessibilityState['expanded']>;
export declare function isElementSelected(element: ReactTestInstance): NonNullable<AccessibilityState['selected']>;
export declare function getAccessibleName(element: ReactTestInstance): string | undefined;
export {};
