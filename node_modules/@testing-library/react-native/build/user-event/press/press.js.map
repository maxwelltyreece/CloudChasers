{"version":3,"file":"press.js","names":["_componentTree","require","_textInput","_pointerEvents","_hostComponentNames","_eventBuilder","_utils","_constants","press","element","basePress","config","type","duration","longPress","options","isPressableText","emitTextPressEvents","isHostTextInput","isTextInputEditable","isPointerEventEnabled","emitTextInputPressEvents","isEnabledTouchResponder","emitPressablePressEvents","hostParentElement","getHostParent","warnAboutRealTimersIfNeeded","wait","dispatchEvent","EventBuilder","Common","responderGrant","responderRelease","DEFAULT_MIN_PRESS_DURATION","props","onStartShouldSetResponder","hasPressEventHandler","Boolean","onPress","onLongPress","onPressIn","onPressOut","isHostText","disabled","touch"],"sources":["../../../src/user-event/press/press.ts"],"sourcesContent":["import { ReactTestInstance } from 'react-test-renderer';\nimport { getHostParent } from '../../helpers/component-tree';\nimport { isTextInputEditable } from '../../helpers/text-input';\nimport { isPointerEventEnabled } from '../../helpers/pointer-events';\nimport { isHostText, isHostTextInput } from '../../helpers/host-component-names';\nimport { EventBuilder } from '../event-builder';\nimport { UserEventConfig, UserEventInstance } from '../setup';\nimport { dispatchEvent, wait, warnAboutRealTimersIfNeeded } from '../utils';\nimport { DEFAULT_MIN_PRESS_DURATION } from './constants';\n\nexport interface PressOptions {\n  duration?: number;\n}\n\nexport async function press(this: UserEventInstance, element: ReactTestInstance): Promise<void> {\n  await basePress(this.config, element, {\n    type: 'press',\n    duration: 0,\n  });\n}\n\nexport async function longPress(\n  this: UserEventInstance,\n  element: ReactTestInstance,\n  options?: PressOptions,\n): Promise<void> {\n  await basePress(this.config, element, {\n    type: 'longPress',\n    duration: options?.duration ?? 500,\n  });\n}\n\ninterface BasePressOptions {\n  type: 'press' | 'longPress';\n  duration: number;\n}\n\nconst basePress = async (\n  config: UserEventConfig,\n  element: ReactTestInstance,\n  options: BasePressOptions,\n): Promise<void> => {\n  if (isPressableText(element)) {\n    await emitTextPressEvents(config, element, options);\n    return;\n  }\n\n  if (isHostTextInput(element) && isTextInputEditable(element) && isPointerEventEnabled(element)) {\n    await emitTextInputPressEvents(config, element, options);\n    return;\n  }\n\n  if (isEnabledTouchResponder(element)) {\n    await emitPressablePressEvents(config, element, options);\n    return;\n  }\n\n  const hostParentElement = getHostParent(element);\n  if (!hostParentElement) {\n    return;\n  }\n\n  await basePress(config, hostParentElement, options);\n};\n\nconst emitPressablePressEvents = async (\n  config: UserEventConfig,\n  element: ReactTestInstance,\n  options: BasePressOptions,\n) => {\n  warnAboutRealTimersIfNeeded();\n\n  await wait(config);\n\n  dispatchEvent(element, 'responderGrant', EventBuilder.Common.responderGrant());\n\n  await wait(config, options.duration);\n\n  dispatchEvent(element, 'responderRelease', EventBuilder.Common.responderRelease());\n\n  // React Native will wait for minimal delay of DEFAULT_MIN_PRESS_DURATION\n  // before emitting the `pressOut` event. We need to wait here, so that\n  // `press()` function does not return before that.\n  if (DEFAULT_MIN_PRESS_DURATION - options.duration > 0) {\n    await wait(config, DEFAULT_MIN_PRESS_DURATION - options.duration);\n  }\n};\n\nconst isEnabledTouchResponder = (element: ReactTestInstance) => {\n  return isPointerEventEnabled(element) && element.props.onStartShouldSetResponder?.();\n};\n\nconst isPressableText = (element: ReactTestInstance) => {\n  const hasPressEventHandler = Boolean(\n    element.props.onPress ||\n      element.props.onLongPress ||\n      element.props.onPressIn ||\n      element.props.onPressOut,\n  );\n\n  return (\n    isHostText(element) &&\n    isPointerEventEnabled(element) &&\n    !element.props.disabled &&\n    hasPressEventHandler\n  );\n};\n\n/**\n * Dispatches a press event sequence for Text.\n */\nasync function emitTextPressEvents(\n  config: UserEventConfig,\n  element: ReactTestInstance,\n  options: BasePressOptions,\n) {\n  await wait(config);\n  dispatchEvent(element, 'pressIn', EventBuilder.Common.touch());\n\n  // Emit either `press` or `longPress`.\n  dispatchEvent(element, options.type, EventBuilder.Common.touch());\n\n  await wait(config, options.duration);\n  dispatchEvent(element, 'pressOut', EventBuilder.Common.touch());\n}\n\n/**\n * Dispatches a press event sequence for TextInput.\n */\nasync function emitTextInputPressEvents(\n  config: UserEventConfig,\n  element: ReactTestInstance,\n  options: BasePressOptions,\n) {\n  await wait(config);\n  dispatchEvent(element, 'pressIn', EventBuilder.Common.touch());\n\n  // Note: TextInput does not have `onPress`/`onLongPress` props.\n\n  await wait(config, options.duration);\n  dispatchEvent(element, 'pressOut', EventBuilder.Common.touch());\n}\n"],"mappings":"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"}