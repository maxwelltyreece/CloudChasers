{"version":3,"names":["interpolate","Extrapolation","parseSVG","absSVG","normalizeSVG","cartesian2Polar","cubicBezierYForX","serialize","path","move","x","y","curves","map","c","c1","c2","to","join","close","parse","d","segments","createPath","forEach","segment","addCurve","interpolatePath","value","inputRange","outputRange","extrapolate","CLAMP","p","_","index","mixPath","p1","p2","addArc","corner","last","length","from","arc","push","addLine","addQuadraticCurve","cp","curveIsFound","curve","selectCurve","result","i","contains","getYForX","precision","controlPoint","current","previous","next","reverse","smoothing","n","lengthX","lengthY","o","angle","theta","Math","PI","radius","cos","sin","exhaustiveCheck","a","Error","curveLines","points","strategy","point","prev","cps","cpe","p0","cp1x","cp1y","cp2x","cp2y","cp3x","cp3y"],"sources":["Paths.ts"],"sourcesContent":["import { interpolate, Extrapolation } from \"react-native-reanimated\";\nimport parseSVG from \"parse-svg-path\";\nimport absSVG from \"abs-svg-path\";\nimport normalizeSVG from \"normalize-svg-path\";\n\nimport type { Vector } from \"./Vectors\";\nimport { cartesian2Polar } from \"./Coordinates\";\nimport { cubicBezierYForX } from \"./Math\";\n\ntype SVGCloseCommand = [\"Z\"];\ntype SVGMoveCommand = [\"M\", number, number];\ntype SVGCurveCommand = [\"C\", number, number, number, number, number, number];\ntype SVGNormalizedCommands = [\n  SVGMoveCommand,\n  ...(SVGCurveCommand | SVGCloseCommand)[]\n];\n\ninterface Curve {\n  to: Vector;\n  c1: Vector;\n  c2: Vector;\n}\n\nexport type Path = {\n  move: Vector;\n  curves: Curve[];\n  close: boolean;\n};\n\n/**\n * @summary Serialize a path into an SVG path string\n * @worklet\n */\nexport const serialize = (path: Path) => {\n  \"worklet\";\n  return `M${path.move.x},${path.move.y} ${path.curves\n    .map((c) => `C${c.c1.x},${c.c1.y} ${c.c2.x},${c.c2.y} ${c.to.x},${c.to.y}`)\n    .join(\" \")}${path.close ? \"Z\" : \"\"}`;\n};\n\n/**\n * @description ⚠️ this function cannot run on the UI thread. It must be executed on the JS thread\n * @summary Parse an SVG path into a sequence of Bèzier curves.\n * The SVG is normalized to have absolute values and to be approximated to a sequence of Bèzier curves.\n */\nexport const parse = (d: string): Path => {\n  const segments: SVGNormalizedCommands = normalizeSVG(absSVG(parseSVG(d)));\n  const path = createPath({ x: segments[0][1], y: segments[0][2] });\n  segments.forEach((segment) => {\n    if (segment[0] === \"Z\") {\n      close(path);\n    } else if (segment[0] === \"C\") {\n      addCurve(path, {\n        c1: {\n          x: segment[1],\n          y: segment[2],\n        },\n        c2: {\n          x: segment[3],\n          y: segment[4],\n        },\n        to: {\n          x: segment[5],\n          y: segment[6],\n        },\n      });\n    }\n  });\n  return path;\n};\n\n/**\n * @summary Interpolate between paths.\n * @worklet\n */\nexport const interpolatePath = (\n  value: number,\n  inputRange: number[],\n  outputRange: Path[],\n  extrapolate = Extrapolation.CLAMP\n) => {\n  \"worklet\";\n  const path = {\n    move: {\n      x: interpolate(\n        value,\n        inputRange,\n        outputRange.map((p) => p.move.x),\n        extrapolate\n      ),\n      y: interpolate(\n        value,\n        inputRange,\n        outputRange.map((p) => p.move.y),\n        extrapolate\n      ),\n    },\n    curves: outputRange[0].curves.map((_, index) => ({\n      c1: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c1.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c1.y),\n          extrapolate\n        ),\n      },\n      c2: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c2.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].c2.y),\n          extrapolate\n        ),\n      },\n      to: {\n        x: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].to.x),\n          extrapolate\n        ),\n        y: interpolate(\n          value,\n          inputRange,\n          outputRange.map((p) => p.curves[index].to.y),\n          extrapolate\n        ),\n      },\n    })),\n    close: outputRange[0].close,\n  };\n  return serialize(path);\n};\n\n/**\n * @summary Interpolate two paths with an animation value that goes from 0 to 1\n * @worklet\n */\nexport const mixPath = (\n  value: number,\n  p1: Path,\n  p2: Path,\n  extrapolate = Extrapolation.CLAMP\n) => {\n  \"worklet\";\n  return interpolatePath(value, [0, 1], [p1, p2], extrapolate);\n};\n\n/**\n * @summary Create a new path\n * @worklet\n */\nexport const createPath = (move: Vector): Path => {\n  \"worklet\";\n  return {\n    move,\n    curves: [],\n    close: false,\n  };\n};\n\n/**\n * @summary Add an arc command to a path\n * @worklet\n */\nexport const addArc = (path: Path, corner: Vector, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  const arc = 9 / 16;\n  path.curves.push({\n    c1: {\n      x: (corner.x - from.x) * arc + from.x,\n      y: (corner.y - from.y) * arc + from.y,\n    },\n    c2: {\n      x: (corner.x - to.x) * arc + to.x,\n      y: (corner.y - to.y) * arc + to.y,\n    },\n    to,\n  });\n};\n\n/**\n * @summary Add a cubic Bèzier curve command to a path.\n * @worklet\n */\nexport const addCurve = (path: Path, c: Curve) => {\n  \"worklet\";\n  path.curves.push({\n    c1: c.c1,\n    c2: c.c2,\n    to: c.to,\n  });\n};\n\n/**\n * @summary Add a line command to a path.\n * @worklet\n */\nexport const addLine = (path: Path, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  path.curves.push({\n    c1: from,\n    c2: to,\n    to,\n  });\n};\n\n/**\n * @summary Add a quadratic Bèzier curve command to a path.\n * @worklet\n */\nexport const addQuadraticCurve = (path: Path, cp: Vector, to: Vector) => {\n  \"worklet\";\n  const last = path.curves[path.curves.length - 1];\n  const from = last ? last.to : path.move;\n  path.curves.push({\n    c1: {\n      x: from.x / 3 + (2 / 3) * cp.x,\n      y: from.y / 3 + (2 / 3) * cp.y,\n    },\n    c2: {\n      x: to.x / 3 + (2 / 3) * cp.x,\n      y: to.y / 3 + (2 / 3) * cp.y,\n    },\n    to,\n  });\n};\n\n/**\n * @summary Add a close command to a path.\n * @worklet\n */\nexport const close = (path: Path) => {\n  \"worklet\";\n  path.close = true;\n};\n\ninterface SelectedCurve {\n  from: Vector;\n  curve: Curve;\n}\n\ninterface NullableSelectedCurve {\n  from: Vector;\n  curve: Curve | null;\n}\n\n/**\n * @worklet\n */\nconst curveIsFound = (c: NullableSelectedCurve): c is SelectedCurve => {\n  \"worklet\";\n  return c.curve !== null;\n};\n\n/**\n * @summary Return the curves at x. This function assumes that only one curve is available at x\n * @worklet\n */\nexport const selectCurve = (path: Path, x: number): SelectedCurve | null => {\n  \"worklet\";\n  const result: NullableSelectedCurve = {\n    from: path.move,\n    curve: null,\n  };\n  for (let i = 0; i < path.curves.length; i++) {\n    const c = path.curves[i];\n    const contains =\n      result.from.x > c.to.x\n        ? x >= c.to.x && x <= result.from.x\n        : x >= result.from.x && x <= c.to.x;\n    if (contains) {\n      result.curve = c;\n      break;\n    }\n    result.from = c.to;\n  }\n  if (!curveIsFound(result)) {\n    return null;\n  }\n  return result;\n};\n\n/**\n * @summary Return the y value of a path given its x coordinate\n * @example\n    const p1 = parse(\n      \"M150,0 C150,0 0,75 200,75 C75,200 200,225 200,225 C225,200 200,150 0,150\"\n    );\n    // 75\n    getYForX(p1, 200))\n    // ~151\n    getYForX(p1, 50)\n * @worklet\n */\nexport const getYForX = (path: Path, x: number, precision = 2) => {\n  \"worklet\";\n  const c = selectCurve(path, x);\n  if (c === null) {\n    return null;\n  }\n  return cubicBezierYForX(\n    x,\n    c.from,\n    c.curve.c1,\n    c.curve.c2,\n    c.curve.to,\n    precision\n  );\n};\n\nconst controlPoint = (\n  current: Vector,\n  previous: Vector,\n  next: Vector,\n  reverse: boolean,\n  smoothing: number\n) => {\n  \"worklet\";\n  const p = previous || current;\n  const n = next || current;\n  // Properties of the opposed-line\n  const lengthX = n.x - p.x;\n  const lengthY = n.y - p.y;\n\n  const o = cartesian2Polar({ x: lengthX, y: lengthY });\n  // If is end-control-point, add PI to the angle to go backward\n  const angle = o.theta + (reverse ? Math.PI : 0);\n  const length = o.radius * smoothing;\n  // The control point position is relative to the current point\n  const x = current.x + Math.cos(angle) * length;\n  const y = current.y + Math.sin(angle) * length;\n  return { x, y };\n};\n\nconst exhaustiveCheck = (a: never): never => {\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\n/**\n * @summary Link points via a smooth cubic Bézier curves\n * from https://github.com/rainbow-me/rainbow\n * @worklet\n */\nexport const curveLines = (\n  points: Vector<number>[],\n  smoothing: number,\n  strategy: \"complex\" | \"bezier\" | \"simple\"\n) => {\n  \"worklet\";\n  const path = createPath(points[0]);\n  // build the d attributes by looping over the points\n  for (let i = 0; i < points.length; i++) {\n    if (i === 0) {\n      continue;\n    }\n    const point = points[i];\n    const next = points[i + 1];\n    const prev = points[i - 1];\n    const cps = controlPoint(prev, points[i - 2], point, false, smoothing);\n    const cpe = controlPoint(point, prev, next, true, smoothing);\n    switch (strategy) {\n      case \"simple\":\n        const cp = {\n          x: (cps.x + cpe.x) / 2,\n          y: (cps.y + cpe.y) / 2,\n        };\n        addQuadraticCurve(path, cp, point);\n        break;\n      case \"bezier\":\n        const p0 = points[i - 2] || prev;\n        const p1 = points[i - 1];\n        const cp1x = (2 * p0.x + p1.x) / 3;\n        const cp1y = (2 * p0.y + p1.y) / 3;\n        const cp2x = (p0.x + 2 * p1.x) / 3;\n        const cp2y = (p0.y + 2 * p1.y) / 3;\n        const cp3x = (p0.x + 4 * p1.x + point.x) / 6;\n        const cp3y = (p0.y + 4 * p1.y + point.y) / 6;\n        path.curves.push({\n          c1: { x: cp1x, y: cp1y },\n          c2: { x: cp2x, y: cp2y },\n          to: { x: cp3x, y: cp3y },\n        });\n        if (i === points.length - 1) {\n          path.curves.push({\n            to: points[points.length - 1],\n            c1: points[points.length - 1],\n            c2: points[points.length - 1],\n          });\n        }\n        break;\n      case \"complex\":\n        path.curves.push({\n          to: point,\n          c1: cps,\n          c2: cpe,\n        });\n        break;\n      default:\n        exhaustiveCheck(strategy);\n    }\n  }\n  return path;\n};\n"],"mappings":"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"}